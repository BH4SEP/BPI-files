#!/bin/bash
#
## berryboot
#
BPILICENSE="GPLv2 or any later version"
BPICONF="berryboot-debian-lite-demo2-from-sd.conf"
BPICONFVERSION="v1.0.1"
#
## Create your own ubuntu img from SD
#
## STEP 1: Insert the ubuntu system SD card to your PC or BPI BOARD
## STEP 2: check your SD mount point and modify the BOOTFILES, ROOTFILE(this file)
## STEP 3: download bpi-tools: git clone https://github.com/BPI-SINOVOIP/bpi-tools.git
## STEP 4: bpi-migrate -c bpi-m2u.conf -c debian-lite-beta-from-sd.conf
## or
##         bpi-migrate -c bpi-m2u-lcd7.conf -c debian-lite-beta-from-sd.conf
##         more ref. check https://github.com/BPI-SINOVOIP/BPI-files/tree/master/others/for-bpi-tools/conf/board
##         bpi-migrate -c bpi-xxx.conf -c debian-lite-beta-from-sd.conf
##         bpi-xxx.conf:
##		bpi-m1.conf
##		bpi-m1-m1p-r1.conf
##		bpi-m1p.conf
##		bpi-m2.conf
##		bpi-m2p.conf
##		bpi-m2u.conf
##		bpi-m2u-lcd7.conf
##		bpi-m3.conf
##		bpi-m3-lcd7.conf
##		bpi-m64.conf
##		bpi-r1.conf
#
## BPI-BOOT
#
# INFO: change the BPI-BOOT dir. on your env.
S_BOOTFILES="$BOOTFILES"
BOOTFILES="/media/pi/BPI-BOOT"
# INFO: if your want put some files to BPI-BOOT
#BOOTFILES="$BOOTFILES your-BPI-BOOT-bpi-xxx.tgz"
#BOOTFILES="$BOOTFILES ${S_BOOTFILES}"
#
## INFO: change the IMG SIZE, 7456MB = eMMC size
#
SIZE="7456"
BOOTSIZE="256"
ROOTSIZE="3456"
ROOTURL=""
#
## BPI-ROOT
#
# INFO: change the BPI-ROOT dir. on your env.
ROOTFILE="/media/pi/BPI-ROOT"
# INFO: if your want put some files to BPI-ROOT
S_BPIFILES="$BPIFILES"
BPIFILES=""
#BPIFILES="$BPIFILES your-BPI-ROOT-bpi-xxx.tgz"
#BPIFILES="$BPIFILES ${S_BPIFILES}"
#
## INFO: change the OUTPUT IMGFILE NAME
#
TODAY=$(date +%F)
#
IMGFILE="${TODAY}-berryboot-debian-8-jessie-lite-demo2-${BPIBOARD}.img"
#
#
## FUNC
#
USER_NEW_IMAGE=create_user_image
create_user_image() {
  echo create_user_image: hello
  #exit
  if [ -z ${SIZE} ] ; then
    SIZE=7456
  fi
  if [ -z ${BOOTSIZE} ] ; then
    BOOTSIZE=256
  fi
  if [ -z ${ROOTSIZE} ] ; then
    ROOTSIZE=3456
  fi
  RAWSIZE=100
  OFFSET=$((RAWSIZE + BOOTSIZE))
  echo "SIZE=$SIZE, RAWSIZE=$RAWSIZE, BOOTSIZE=$BOOTSIZE, OFFSET=$OFFSET"
  echo "ROOTSIZE=$ROOTSIZE"
  echo
  echo "#####################"
  echo "# Creating img file #"
  echo "#    ${SIZE} = 8G EMMC #"
  echo "#####################"
  echo
  dd if=/dev/zero bs=1M count=${SIZE} | pv | dd of=${IMGFILE}
  LOOP_DEV=`sudo losetup -f --show ${IMGFILE}`
  LOOP_PART_BOOT="${LOOP_DEV}p1"
  LOOP_PART_SYS="${LOOP_DEV}p2"
  LOOP_PART_USER="${LOOP_DEV}p3"
  echo
  echo "#########################"
  echo " +>${LOOP_DEV} "
  echo " +->${LOOP_PART_BOOT} "
  echo " +->${LOOP_PART_SYS} "
  echo "#########################"
  echo
  #
  SIZE1=$((SIZE - 1))
  echo
  echo "#############################"
  echo "# Creating partitions table #"
  echo "#############################"
  echo
  sudo parted -s "${LOOP_DEV}" mklabel msdos
  sudo parted -s "${LOOP_DEV}" unit MiB mkpart primary fat32 -- ${RAWSIZE}MiB ${OFFSET}MiB
  sudo parted -s "${LOOP_DEV}" unit MiB mkpart primary ext2 -- ${OFFSET}MiB ${ROOTSIZE}MiB
  sudo parted -s "${LOOP_DEV}" unit MiB mkpart primary ext2 -- ${ROOTSIZE}MiB ${SIZE1}MiB
  sudo parted -s "${LOOP_DEV}" set 1 boot on
  sudo parted -s "${LOOP_DEV}" print
  sudo partprobe "${LOOP_DEV}"
  #
  echo
  echo "########################"
  echo "# Creating filesystems #"
  echo "########################"
  echo
  sudo mkfs.vfat "${LOOP_PART_BOOT}" -I -n BPI-BOOT
  sudo mkfs.ext4 -O ^has_journal -E stride=2,stripe-width=1024 -b 4096 "${LOOP_PART_SYS}" -L BPI-ROOT
  sudo mkfs.ext4 -O ^has_journal -E stride=2,stripe-width=1024 -b 4096 "${LOOP_PART_USER}" -L BPI-USER
  sudo sync
}
#END

