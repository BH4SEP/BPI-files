#!/bin/bash
#
## debian lite
#
BPILICENSE="GPLv2 or any later version"
BPICONF="debian8-lite-from-debootstrap.conf"
BPICONFVERSION="v1.0.2"
#
## Create your own ubuntu img from SD
#
## STEP 1: Insert the ubuntu system SD card to your PC or BPI BOARD
## STEP 2: check your SD mount point and modify the BOOTFILES, ROOTFILE(this file)
## STEP 3: download bpi-tools: git clone https://github.com/BPI-SINOVOIP/bpi-tools.git
## STEP 4: bpi-migrate -c bpi-m2u.conf -c debian-lite-beta-from-sd.conf
## or
##         bpi-migrate -c bpi-m2u.conf -I '-sd-emmc' -V '-demo' -c debian8-lite-from-debootstrap.conf
##         bpi-migrate -c bpi-m2u-lcd7.conf -c debian-lite-beta-from-sd.conf
##         more ref. check https://github.com/BPI-SINOVOIP/BPI-files/tree/master/others/for-bpi-tools/conf/board
##         bpi-migrate -c bpi-xxx.conf -c debian-lite-beta-from-sd.conf
##         bpi-xxx.conf:
##		bpi-m1.conf
##		bpi-m1-m1p-r1.conf
##		bpi-m1p.conf
##		bpi-m2.conf
##		bpi-m2p.conf
##		bpi-m2u.conf
##		bpi-m2u-lcd7.conf
##		bpi-m3.conf
##		bpi-m3-lcd7.conf
##		bpi-m64.conf
##		bpi-r1.conf
#
## BPI-BOOT
#
# INFO: change the BPI-BOOT dir. on your env.
S_BOOTFILES="$BOOTFILES"
#BOOTFILES="/media/pi/BPI-BOOT"
# INFO: if your want put some files to BPI-BOOT
#BOOTFILES="$BOOTFILES your-BPI-BOOT-bpi-xxx.tgz"
BOOTFILES="$BOOTFILES ${S_BOOTFILES}"
#
## INFO: change the IMG SIZE, 7296MB = eMMC size
#
SIZE="7296"
BOOTSIZE="256"
ROOTURL=""
#
## BPI-ROOT
#
# INFO: change the BPI-ROOT dir. on your env.
distro="jessie"
repo="http://localhost:3142/httpredir.debian.org/debian"
ROOTFILE="bpi-rootfs-${distro}.tgz"
#ROOTFILE="/media/pi/BPI-ROOT"

# INFO: if your want put some files to BPI-ROOT
S_BPIFILES="$BPIFILES"
BPIFILES=""
#BPIFILES="$BPIFILES your-BPI-ROOT-bpi-xxx.tgz"
BPIFILES="$BPIFILES ${S_BPIFILES}"
#
## INFO: change the OUTPUT IMGFILE NAME
#
TODAY=$(date +%F)
#IMGVER="-beta"
#IMGDISK="-sd-emmc"
#
IMGOSNAME="debian-8-jessie-lite"
#
IMGFILE="${TODAY}-${IMGOSNAME}${IMGVER}-${BPIBOARD}${IMGDISK}.img"
#END
##########################################################################
#!/bin/bash
#thanks to Boris Lovosevic from: https://github.com/loboris
APP=$0
echo $APP
STARTTIME=`date +%s`
_excode=0

if [ "$(id -u)" != "0" ]; then
   echo "Script must be run as root !"
   exit 0
fi

#ONLY_BASE="no"
ONLY_BASE="yes"
#
HOSTNAME="bpi-iot-ros-ai"
USER="pi"
ROOTPASS="bananapi"
USERPASS="bananapi"
#
_timezone="Asia/Taipei"
#_timezone=""
#
LANGUAGE="en"
LANG="en_US.UTF-8"
#
# === Ubuntu ===
#distro="precise"
#distro="trusty"
#distro="xenial"
#distro="utopic"
#distro="vivid"
#distro="wily"
#repo="http://ports.ubuntu.com/ubuntu-ports"
#repo="http://localhost:3142/ports.ubuntu.com/ubuntu-ports"
#
# === Debian ===
#distro="wheezy"
#distro="jessie"
#distro="stretch"
#repo="http://ftp.hr.debian.org/debian"
#repo="http://localhost:3142/httpredir.debian.org/debian"
#raspbian="no"
#
# === Raspbian ===
#distro="wheezy"
#distro="jessie"
#distro="stretch"
#repo="http://archive.raspbian.org/raspbian"
#raspbian="yes"
#. bpi-params.sh
#
# ===================
odir=bpi-rootfs-$distro
#mount -o remount,rw,exec,dev $odir
# ===================

#############################################
_DST="Ubuntu"
_REL="xenial"
_apt="-y -q"
#
export LANG=${LANG}
echo ""
export LC_ALL=${LANG}
sleep 0.1
echo -e "\033[1A\033[K"
export LANGUAGE=${LANGUAGE}
#
_LOGFILE="/install.log"
#
export DEBIAN_FRONTEND=noninteractive
#############################################

create_odir() {
  if [ "${distro}" = "" ]; then
    echo "Distribution must be specified."
    exit 0
  fi
  if [ "${repo}" = "" ]; then
    echo "Repository must be specified."
    exit 0
  fi
  #
  if [ ! -d $odir ]; then
    mkdir -p $odir
  fi
}

#
## show progress
#
proc_wait() {
    spin='-\|/'

    i=0
    while kill -0 $1 2>/dev/null
    do
      i=$(( (i+1) %4 ))
      printf "\r$2 ${spin:$i:1}"
      sleep .1
    done
    _excode=$?

    if [ $_excode -eq 0 ]
    then
      printf "\rOK.                        \n"
    else
      printf "\rERROR.                     \n"
    fi
}
# **************************

#
## DEBOOTSTRAP LINUX DISTRO
#
run_debootstrap() {
  echo ""

  touch $odir/_$distro

  echo "DEBOOTSTRAP, FIRST STAGE"
  if [ "${raspbian}" = "yes" ] ; then
    debootstrap --arch armhf --foreign --no-check-gpg --include=ca-certificates --verbose --include=wget ${distro} $odir $repo > /dev/null 2>&1 &
  else
  echo   "debootstrap --arch armhf --foreign --verbose --variant=minbase --include=wget ${distro} $odir $repo > /dev/null 2>&1 &"
  #  debootstrap --arch armhf --foreign --verbose --variant=minbase --include=wget ${distro} $odir $repo > /dev/null 2>&1 &
  debootstrap --include=locales --arch=armhf --foreign ${distro} $odir $repo
  #  debootstrap --arch armhf --foreign --verbose --variant=buildd --include=wget ${distro} $odir $repo > /dev/null 2>&1 &
  fi
  pid=$!
  proc_wait $pid "please wait"
  if [ $_excode -ne 0 ]; then
    echo "ERROR IN DEBOOTSTRAP!"
    exit 0
  fi
}

#
## CREATE NEW sources.list
#
create_sources_list() {
echo "Creating \"sources.list\""
case ${distro} in
xenial|trusty|utopic|precise|vivid|wily*)
cat > $odir/sources.list << _EOF_
deb $repo/ $distro main restricted universe multiverse
deb-src $repo/ $distro main restricted universe multiverse
deb $repo/ $distro-updates main restricted universe multiverse
deb-src $repo/ $distro-updates main restricted universe multiverse
deb $repo/ $distro-security main restricted universe multiverse
deb $repo/ $distro-backports main restricted universe multiverse

_EOF_
;;*)
if [ "${raspbian}" = "yes" ] ; then
cat > $odir/sources.list << _EOF_
deb $repo/ $distro main contrib non-free
deb-src $repo/ $distro main contrib non-free

_EOF_
else
cat > $odir/sources.list << _EOF_
deb $repo/ $distro main contrib non-free
deb-src $repo/ $distro main contrib non-free

deb $repo/ $distro-updates main contrib non-free
deb-src $repo/ $distro-updates main contrib non-free

deb $repo/ $distro-backports main contrib non-free
deb-src $repo/ $distro-backports main contrib non-free

_EOF_
fi
;;esac
}

#
## Make necessary directories and copy some files
#
install_second-stage() {
  mkdir -p $odir/etc/default > /dev/null 2>&1
  mkdir -p $odir/usr/local/bin
  mkdir -p $odir/usr/bin > /dev/null 2>&1
  #
  cp /etc/timezone $odir/etc
  cp /usr/bin/qemu-arm-static $odir/usr/bin
  #cp bpi-second-stage $odir/bpi-second-stage
  cp ${BPICONF} $odir/bpi-second-stage
  #cp bpi-params.sh $odir/bpi-params.sh
}

run_second_stage() {
  #if ! chroot $odir /bin/bash /bpi-second-stage; then #on ARM
  if ! chroot $odir /usr/bin/qemu-arm-static -cpu cortex-a9 /bin/bash /bpi-second-stage; then
    mv $odir/install.log . > /dev/null 2>&1
    echo "================================================"
    echo "ERROR on second-stage, instalation NOT FINISHED."
    echo "================================================"
    exit 1
  fi
  #
  if [ ! -f $odir/_OK_ ]; then
    mv $odir/install.log . > /dev/null 2>&1
    echo "================================================"
    echo "ERROR on second-stage, instalation NOT FINISHED."
    echo "================================================"
    exit 1
  fi
}

remove_second-stage() {
  rm $odir/_OK_ > /dev/null 2>&1
  rm $odir/bpi-second-stage > /dev/null 2>&1
  rm $odir/bpi-params.sh > /dev/null 2>&1
  mv $odir/install.log ./install-${distro}.log > /dev/null 2>&1
  #
  mkdir -p $odir/boot > /dev/null 2>&1
  rm -r $odir/boot/* > /dev/null 2>&1
  chown -R root:root $odir/lib/* > /dev/null 2>&1
  #
  rm -rf $odir/dev/*
  rm -rf $odir/proc/*
  rm -rf $odir/run/*
  rm -rf $odir/sys/*
  rm -rf $odir/tmp/*
  sync
}

#
## Create fstab
#
create_fstab() {
  echo "Creating \"fstab\""
  echo "# Banana Pi fstab" > $odir/etc/fstab
  echo "/dev/mmcblk0p2  /  ext4  errors=remount-ro,noatime,nodiratime  0 1" >> $odir/etc/fstab
  echo "tmpfs /tmp  tmpfs nodev,nosuid,mode=1777  0 0" >> $odir/etc/fstab
  sync
}

#
## create rootfs.tgz
#
create_rootfs_tgz() {
  cd ${odir}
  tar czvf ../${ROOTFILE} .
  cd ..
}

#
## show finished
#
show_finished() {
  echo ""
  date
  echo ""
  echo "************************************************************"
  echo "Instalation finished."
  echo "************************************************************"
  ENDTIME=`date +%s`
  RUNTIMESEC=$((ENDTIME-STARTTIME))
  MIN=$(((RUNTIMESEC)/60))
  SEC=$(((RUNTIMESEC)%60))
  echo "RUNTIME" "$MIN:$SEC"
  echo "************************************************************"
}

##########################################################

#*********************
# ** CONFIGURE NETWORK
#*********************
ss_set_network() {

# ** SET hostname
echo ${HOSTNAME} > /etc/hostname

return 0

mkdir -p /etc/network
cat >> /etc/network/interfaces << _EOF_
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
_EOF_

}


# *************************************************
# ** Some tricks to make everything work
# *************************************************
ss_do_tricks() {

_DST=`lsb_release -si`

cat > /etc/modules << _EOF_
# /etc/modules: kernel modules to load at boot time.
#
# This file contains the names of kernel modules that should be loaded
# at boot time, one per line. Lines beginning with "#" are ignored.

## Display and GPU
#ump
#mali
##mali_drm
## WiFi
#8192cu
#8188eu
#8189es
## GPIO
#gpio-sunxi
_EOF_

# ADJUST rc.local for some tuning
cat > /etc/rc.local << _EOF_
#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

echo 0 > /proc/sys/kernel/hung_task_timeout_secs

dmesg -n 1

_EOF_

echo "exit 0" >> /etc/rc.local


if [ ! "${ONLY_BASE}" = "yes" ] ; then
# *****************************
# Setup tmux to show the cursor
cat > /root/.tmux.conf << _EOF_
setw -ga terminal-overrides ',*:Cc=\E[?120;%p1%s;240c:Cr=\E[?120;0;240c:civis=\E[?25l:cnorm=\E[?25h:cvvis=\E[?25h,'
set -g status-bg black
set -g status-fg white
_EOF_

cat > /home/$USER/.tmux.conf << _EOF_
setw -ga terminal-overrides ',*:Cc=\E[?120;%p1%s;240c:Cr=\E[?120;0;240c:civis=\E[?25l:cnorm=\E[?25h:cvvis=\E[?25h,'
set -g status-bg black
set -g status-fg white
_EOF_
fi

#*********************
# WARNING TO RESIZE FS
cat > /usr/local/bin/fs_resize_warning << _EOF_
#!/bin/sh

echo -e "\033[31m\033[1m***********************************************"
echo -e "WARNING: TO RESIZE FILESYSTEM RUN:"
echo -e "sudo fs_resize or sudo /usr/local/bin/fs_resize"
echo -e "to remove this message run:"
echo -e "sudo rm /usr/local/bin/fs_resize_warning"
echo -e "***********************************************\033[22m\033[37m"
setterm -default

_EOF_

chmod +x /usr/local/bin/fs_resize_warning > /dev/null 2>&1


if [ ! "${ONLY_BASE}" = "yes" ] ; then
# ******************************************
# ADJUST .bashrc to start tmux in fb console
cat >> /root/.bashrc << _EOF_

if [ "\$TERM" = "linux" ]; then
  if [[ ! \$TERM =~ screen ]]; then
      exec tmux
  fi
fi
if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi
_EOF_

cat >> /home/$USER/.bashrc << _EOF_

if [ "\$TERM" = "linux" ]; then
  if [[ ! \$TERM =~ screen ]]; then
      exec tmux
  fi
fi
if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi

_EOF_

# *********************************************
# Enable serial console and 3 virtual terminals
if [ "${_DST}" = "Ubuntu" ]; then
cat > /etc/init/ttyS0.conf << _EOF_
# ttyS0 - getty
#
# This service maintains a getty on ttyS0 from the point the system is
# started until it is shut down again.

start on stopped rc or RUNLEVEL=[12345]
stop on runlevel [!12345]

respawn
exec /sbin/getty -L 115200 ttyS0 vt102
_EOF_
rm /etc/init/tty4.conf > /dev/null 2>&1
rm /etc/init/tty5.conf > /dev/null 2>&1
rm /etc/init/tty6.conf > /dev/null 2>&1
else
    echo "S0:23:respawn:/sbin/getty -L ttyS0 115200 vt102" >> /etc/inittab
    ln -sf /usr/lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty2.service >> $_LOGFILE 2>&1
    ln -sf /usr/lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty2.service >> $_LOGFILE 2>&1
fi

# Set console Fixed font
if [ -f /etc/default/console-setup ]; then
cat /etc/default/console-setup | sed s/"FONTFACE=\"VGA\""/"FONTFACE=\"Fixed\""/g > /tmp/_consset
mv /tmp/_consset /etc/default/console-setup
fi
else
cat >> /root/.bashrc << _EOF_

if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi
_EOF_

cat >> /home/$USER/.bashrc << _EOF_

if [ -f /usr/local/bin/fs_resize_warning ]; then
. /usr/local/bin/fs_resize_warning
fi

_EOF_
fi

}

# ====================================================

ss_run_second_stage() {
  if [ ! -f /debootstrap/debootstrap ]; then
    exit 1
  fi
  #
  echo "DEBOOTSTRAP, SECOND-STAGE"
  /debootstrap/debootstrap --second-stage >> $_LOGFILE &
  pid=$! # Process Id of the previous running command
  sleep 0.2
  echo -e "\033[1A\033[K"
  proc_wait $pid "please wait"
  #
  if [ ! $_excode -eq 0 ]; then
    echo "*********************"
    echo "** debootstrap ERROR."
    echo "*********************"
    exit 1
  fi
  #
  echo "DEBOOTSTRAP, SECOND-STAGE FINISHED."
  sleep 1
}

ss_setup_lang() {
  mv /sources.list /etc/apt/sources.list
  echo "LANG=\"$LANG\"" > /etc/default/locale
  echo "LC_ALL=\"$LANG\"" >> /etc/default/locale
}

#ss_set_network

ss_patch_udev() {
  #---------------------------------------------------------------------
  if [ -f /etc/init.d/udev ]; then
    cat /etc/init.d/udev | sed '/### END INIT INFO/a\exit 0' > /tmp/_udev_
    mv /tmp/_udev_ /etc/init.d/udev
  fi
#---------------------------------------------------------------------
}

ss_raspbian_key() {
  if [ "${raspbian}" = "yes" ] ; then
    wget https://archive.raspbian.org/raspbian.public.key
    apt-key add raspbian.public.key
  fi
}

ss_update() {
  echo "======================="
  echo "Updating & upgrading..."
  apt-get ${_apt} update >> $_LOGFILE 2>&1 &
  pid=$!
  proc_wait $pid "please wait"
  apt-get ${_apt} upgrade >> $_LOGFILE 2>&1 &
  pid=$!
  proc_wait $pid "please wait"
  apt-get clean >> $_LOGFILE 2>&1
}

ss_policy_disable() {
  # ============================================
  # prevent services from starting automatically
  #---------------------------------------------
cat << EOD > /usr/sbin/policy-rc.d
#!/bin/sh
echo "rc.d operations disabled for chroot"
exit 101
EOD
  chmod 0755 /usr/sbin/policy-rc.d
#---------------------------------------------
}

ss_install_essential() {
  echo "Installing essential packages..."
  apt-get ${_apt} install lsb-release >> $_LOGFILE 2>&1 &
  pid=$!
  proc_wait $pid "please be patient"
  apt-get clean >> $_LOGFILE 2>&1
}

ss_install_packages() {
  _DST=`lsb_release -si`
  _REL=`lsb_release -sc`
  echo ""
  echo -e "\033[31m\033[1m*** Installing $_DST $_REL ***\033[22m\033[37m"
  echo ""
  if [ "${ONLY_BASE}" = "yes" ] ; then
    echo "Installing base packages..."
    apt-get ${_apt} install sudo isc-dhcp-client netbase ifupdown iproute network-manager --no-install-recommends >> $_LOGFILE 2>&1 &
    pid=$!
    proc_wait $pid "please be patient"
    apt-get clean >> $_LOGFILE 2>&1
    
  else
    echo "Installing base packages..."
    apt-get ${_apt} install udev apt-utils locales dialog sudo isc-dhcp-client netbase ifupdown iproute openssh-server iputils-ping wget curl ntpdate ntp less tzdata console-common module-init-tools u-boot-tools initramfs-tools keyboard-configuration console-setup xz-utils fbset --no-install-recommends >> $_LOGFILE 2>&1 &
    pid=$!
    proc_wait $pid "please be patient"
    apt-get clean >> $_LOGFILE 2>&1

    # ** INSTALL base language pack for your language
    if [ "${_DST}" = "Ubuntu" ] ; then
	echo "Installing language pack..."
	apt-get ${_apt} install language-pack-$LANGUAGE-base --no-install-recommends >> $_LOGFILE 2>&1 &
	pid=$!
	proc_wait $pid "please wait"
	apt-get clean >> $_LOGFILE 2>&1
    else
	cat /etc/locale.gen | sed s/"# $LANG"/"$LANG"/g > /tmp/locale.gen
	mv /tmp/locale.gen /etc/locale.gen
	locale-gen >> $_LOGFILE 2>&1
    fi

    # ** INSTALL more usefull packages ....
    # apt-get -y install wireless-tools wpasupplicant axel build-essential git whiptail unzip
    echo "Installing more packages..."
    apt-get ${_apt} install nano mc htop man-db tmux dbus btrfs-tools net-tools ethtool uuid iw lshw network-manager rsync usbutils hdparm i2c-tools parted dosfstools --no-install-recommends >> $_LOGFILE 2>&1 &
    pid=$!
    proc_wait $pid "please wait"
    apt-get clean >> $_LOGFILE 2>&1
  fi
}


ss_setup_system() {
  if ! [ "${ONLY_BASE}" = "yes" ] ; then
    # ** CONFIGURE time zone, keyboard layout, console ...
    echo "Configuring, please wait..."
    if [ ! "${_timezone}" = "" ] ; then
	echo $_timezone > /etc/timezone
    fi
    echo "*** LOCALE ***" >> $_LOGFILE 2>&1
    locale-gen $LANG >> $_LOGFILE 2>&1
    echo "*** TZDATA ***" >> $_LOGFILE 2>&1
    dpkg-reconfigure tzdata >> $_LOGFILE 2>&1
    echo "*** KEYBOARD ***" >> $_LOGFILE 2>&1
    dpkg-reconfigure keyboard-configuration >> $_LOGFILE 2>&1
    echo "*** LOCALES ***" >> $_LOGFILE 2>&1
    dpkg-reconfigure locales >> $_LOGFILE 2>&1
    echo "*** CONSOLE ***" >> $_LOGFILE 2>&1
    dpkg-reconfigure console-setup >> $_LOGFILE 2>&1
  fi
}

ss_root_passwd() {
  echo "*** USER/PASSWORD ***" >> $_LOGFILE 2>&1
  # ** CREATE root password
  echo "CREATING root PASSWORD..."
  #passwd
  echo root:$ROOTPASS | chpasswd
}

ss_adduser() {
  # ** ADD USER
  echo "ADDING USER..."
  # set default shell to /bin/bash
  cat /etc/default/useradd | sed s/"SHELL=\/bin\/sh"/"SHELL=\/bin\/bash"/g > /tmp/useradd
  mv /tmp/useradd /etc/default/useradd
  useradd -m -s "/bin/bash" $USER >> $_LOGFILE 2>&1
  echo $USER:$USERPASS | chpasswd
  usermod -c $USER $USER >> $_LOGFILE 2>&1
  adduser $USER sudo >> $_LOGFILE 2>&1
}

ss_setup_ssh() {
  if ! [ "${ONLY_BASE}" = "yes" ] ; then
    # ** Tricks
    ss_do_tricks

    # ENABLE SSH ROOT LOOGIN WITH PASSWORD
    if [ -f /etc/ssh/sshd_config ]; then
	cat /etc/ssh/sshd_config | sed s/"PermitRootLogin without-password"/"PermitRootLogin yes"/g > /tmp/sshd_config
	mv /tmp/sshd_config /etc/ssh/sshd_config
    fi
    #----------------------------------------------------
    if [ -f /etc/init.d/udev ]; then
	cat /etc/init.d/udev | sed '/^exit 0/d' > /tmp/_udev_
	mv /tmp/_udev_ /etc/init.d/udev
	echo "exit 0" >> /etc/init.d/udev
	chmod +x /etc/init.d/udev
    fi
    #----------------------------------------------------
    killall -KILL ntpd > /dev/null 2>&1
    killall -KILL smbd > /dev/null 2>&1
  fi
}

ss_finished() {
  rm -Rf /boot/* >> $_LOGFILE 2>&1
  chown -R $USER:$USER /home/$USER
  #
  rm /usr/sbin/policy-rc.d
  #
  echo ""
  echo "Instalation finished."
  echo ""
  touch /_OK_
}

ss_bpi_second_stage() {
  ss_run_second_stage
  ss_setup_lang
  ss_set_network
  ss_patch_udev
  ss_raspbian_key
  ss_update
  ss_policy_disable
  ss_install_essential
  ss_install_packages
  ss_setup_system
  ss_root_passwd
  ss_adduser
  ss_setup_ssh
  ss_finished
}

#main
#ss_bpi_second_stage
##########################################################

bpi_create_rootfs()
{
  create_odir
  run_debootstrap
  create_sources_list
  install_second-stage
  run_second_stage
  remove_second-stage
  create_fstab
  create_rootfs_tgz
  show_finished
}

#main
case $APP in
*second-stage*)
  echo "run: second-stage: $APP"
  ss_bpi_second_stage
  exit 0
  ;;
*)
  echo "run: create_rootfs: $APP"
  bpi_create_rootfs
  #exit 0
  ;;
esac

