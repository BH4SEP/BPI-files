root@bpi-iot-ros-ai:~# tinymembench 
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :    230.9 MB/s (0.7%)
 C copy backwards (32 byte blocks)                    :    730.0 MB/s
 C copy backwards (64 byte blocks)                    :    749.7 MB/s (1.2%)
 C copy                                               :    754.4 MB/s (1.2%)
 C copy prefetched (32 bytes step)                    :    800.9 MB/s
 C copy prefetched (64 bytes step)                    :    810.4 MB/s (1.5%)
 C 2-pass copy                                        :    712.2 MB/s (1.1%)
 C 2-pass copy prefetched (32 bytes step)             :    745.7 MB/s (3.1%)
 C 2-pass copy prefetched (64 bytes step)             :    764.3 MB/s (1.2%)
 C fill                                               :   1942.6 MB/s
 C fill (shuffle within 16 byte blocks)               :   1942.9 MB/s (1.5%)
 C fill (shuffle within 32 byte blocks)               :    305.2 MB/s (1.2%)
 C fill (shuffle within 64 byte blocks)               :    311.7 MB/s
 ---
 standard memcpy                                      :    784.0 MB/s (1.5%)
 standard memset                                      :   1943.2 MB/s
 ---
 NEON read                                            :   1222.8 MB/s (1.2%)
 NEON read prefetched (32 bytes step)                 :   1368.3 MB/s
 NEON read prefetched (64 bytes step)                 :   1369.7 MB/s (1.4%)
 NEON read 2 data streams                             :    364.8 MB/s
 NEON read 2 data streams prefetched (32 bytes step)  :    678.6 MB/s (1.9%)
 NEON read 2 data streams prefetched (64 bytes step)  :    705.6 MB/s
 NEON copy                                            :    756.1 MB/s
 NEON copy prefetched (32 bytes step)                 :    757.7 MB/s (1.6%)
 NEON copy prefetched (64 bytes step)                 :    820.9 MB/s
 NEON unrolled copy                                   :    745.6 MB/s (1.4%)
 NEON unrolled copy prefetched (32 bytes step)        :    785.8 MB/s
 NEON unrolled copy prefetched (64 bytes step)        :    799.9 MB/s
 NEON copy backwards                                  :    734.1 MB/s (1.3%)
 NEON copy backwards prefetched (32 bytes step)       :    738.0 MB/s
 NEON copy backwards prefetched (64 bytes step)       :    803.3 MB/s (1.2%)
 NEON 2-pass copy                                     :    719.2 MB/s (1.5%)
 NEON 2-pass copy prefetched (32 bytes step)          :    771.1 MB/s
 NEON 2-pass copy prefetched (64 bytes step)          :    786.7 MB/s (3.8%)
 NEON unrolled 2-pass copy                            :    697.1 MB/s (1.4%)
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    680.6 MB/s (0.9%)
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    714.6 MB/s
 NEON fill                                            :   1945.7 MB/s
 NEON fill backwards                                  :   1944.9 MB/s (1.0%)
 VFP copy                                             :    750.0 MB/s (1.4%)
 VFP 2-pass copy                                      :    696.5 MB/s
 ARM fill (STRD)                                      :   1945.1 MB/s
 ARM fill (STM with 8 registers)                      :   1944.9 MB/s (1.5%)
 ARM fill (STM with 4 registers)                      :   1944.7 MB/s (1.9%)
 ARM copy prefetched (incr pld)                       :    801.4 MB/s (1.5%)
 ARM copy prefetched (wrap pld)                       :    744.3 MB/s
 ARM 2-pass copy prefetched (incr pld)                :    761.8 MB/s (3.2%)
 ARM 2-pass copy prefetched (wrap pld)                :    722.8 MB/s (1.2%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON read (from framebuffer)                         :     51.7 MB/s (0.4%)
 NEON copy (from framebuffer)                         :     50.2 MB/s (0.6%)
 NEON 2-pass copy (from framebuffer)                  :     50.2 MB/s
 NEON unrolled copy (from framebuffer)                :     50.6 MB/s (0.5%)
 NEON 2-pass unrolled copy (from framebuffer)         :     49.9 MB/s
 VFP copy (from framebuffer)                          :    303.6 MB/s (0.6%)
 VFP 2-pass copy (from framebuffer)                   :    282.7 MB/s
 ARM copy (from framebuffer)                          :    181.7 MB/s (1.9%)
 ARM 2-pass copy (from framebuffer)                   :    173.8 MB/s (0.7%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns 
      2048 :    0.0 ns          /     0.0 ns 
      4096 :    0.0 ns          /     0.0 ns 
      8192 :    0.0 ns          /     0.0 ns 
     16384 :    0.0 ns          /     0.0 ns 
     32768 :    0.0 ns          /     0.0 ns 
     65536 :    5.2 ns          /     9.0 ns 
    131072 :    8.1 ns          /    12.7 ns 
    262144 :    9.6 ns          /    14.1 ns 
    524288 :   26.8 ns          /    44.4 ns 
   1048576 :  103.0 ns          /   160.9 ns 
   2097152 :  154.1 ns          /   212.7 ns 
   4194304 :  182.2 ns          /   231.9 ns 
   8388608 :  195.4 ns          /   241.8 ns 
  16777216 :  207.6 ns          /   251.8 ns 
  33554432 :  218.9 ns          /   267.6 ns 
  67108864 :  234.6 ns          /   298.2 ns 
root@bpi-iot-ros-ai:~# bpi-hw
bpi-m2m
root@bpi-iot-ros-ai:~# uname -a
Linux bpi-iot-ros-ai 3.4.39-BPI-M2M-Kernel #1 SMP PREEMPT Sun Oct 22 19:57:25 CST 2017 armv7l armv7l armv7l GNU/Linux
root@bpi-iot-ros-ai:~# 
