root@bpi-iot-ros-ai:/# tinymembench                                             
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)        
                                                                                
==========================================================================      
== Memory bandwidth tests                                               ==      
==                                                                      ==      
== Note 1: 1MB = 1000000 bytes                                          ==      
== Note 2: Results for 'copy' tests show how many bytes can be          ==      
==         copied per second (adding together read and writen           ==      
==         bytes would have provided twice higher numbers)              ==      
== Note 3: 2-pass copy means that we are using a small temporary buffer ==      
==         to first fetch data into it, and only then write it to the   ==      
==         destination (source -> L1 cache, L1 cache -> destination)    ==      
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==      
==         brackets                                                     ==      
==========================================================================      
                                                                                
 C copy backwards                                     :    239.2 MB/s (0.5%)    
 C copy backwards (32 byte blocks)                    :    613.3 MB/s (0.8%)    
 C copy backwards (64 byte blocks)                    :    626.6 MB/s (0.5%)    
 C copy                                               :    624.7 MB/s (0.6%)    
 C copy prefetched (32 bytes step)                    :    832.3 MB/s           
 C copy prefetched (64 bytes step)                    :    835.0 MB/s           
 C 2-pass copy                                        :    499.8 MB/s (0.8%)    
 C 2-pass copy prefetched (32 bytes step)             :    545.3 MB/s (0.9%)    
 C 2-pass copy prefetched (64 bytes step)             :    543.1 MB/s (0.9%)    
 C fill                                               :   1047.0 MB/s (0.5%)    
 C fill (shuffle within 16 byte blocks)               :   1047.4 MB/s (0.5%)    
 C fill (shuffle within 32 byte blocks)               :    315.7 MB/s (0.3%)    
 C fill (shuffle within 64 byte blocks)               :    328.4 MB/s           
 ---                                                                            
 standard memcpy                                      :    727.3 MB/s (2.6%)    
 standard memset                                      :   1010.0 MB/s (1.1%)    
 ---                                                                            
 NEON read                                            :   1196.9 MB/s           
 NEON read prefetched (32 bytes step)                 :   1359.8 MB/s (1.8%)    
 NEON read prefetched (64 bytes step)                 :   1394.0 MB/s (2.4%)    
 NEON read 2 data streams                             :    344.1 MB/s (0.8%)    
 NEON read 2 data streams prefetched (32 bytes step)  :    659.7 MB/s (1.4%)    
 NEON read 2 data streams prefetched (64 bytes step)  :    679.0 MB/s (1.0%)    
 NEON copy                                            :    648.9 MB/s (2.8%)    
 NEON copy prefetched (32 bytes step)                 :    862.0 MB/s (3.7%)    
 NEON copy prefetched (64 bytes step)                 :    875.1 MB/s (4.4%)    
 NEON unrolled copy                                   :    624.7 MB/s (2.9%)    
 NEON unrolled copy prefetched (32 bytes step)        :    801.7 MB/s (5.3%)    
 NEON unrolled copy prefetched (64 bytes step)        :    836.4 MB/s (4.5%)    
 NEON copy backwards                                  :    642.9 MB/s (3.4%)    
 NEON copy backwards prefetched (32 bytes step)       :    860.7 MB/s (3.6%)    
 NEON copy backwards prefetched (64 bytes step)       :    864.6 MB/s (3.3%)    
 NEON 2-pass copy                                     :    523.6 MB/s (1.3%)    
 NEON 2-pass copy prefetched (32 bytes step)          :    532.7 MB/s           
 NEON 2-pass copy prefetched (64 bytes step)          :    540.0 MB/s (1.1%)    
 NEON unrolled 2-pass copy                            :    495.6 MB/s (3.7%)    
 NEON unrolled 2-pass copy prefetched (32 bytes step) :    492.5 MB/s (5.6%)    
 NEON unrolled 2-pass copy prefetched (64 bytes step) :    510.5 MB/s (5.8%)    
 NEON fill                                            :   1045.3 MB/s (6.3%)    
 NEON fill backwards                                  :   1045.7 MB/s (6.8%)    
 VFP copy                                             :    632.3 MB/s (3.8%)    
 VFP 2-pass copy                                      :    490.5 MB/s (4.9%)    
 ARM fill (STRD)                                      :    980.8 MB/s (5.8%)    
 ARM fill (STM with 8 registers)                      :   1043.7 MB/s (6.1%)    
 ARM fill (STM with 4 registers)                      :   1009.7 MB/s (5.1%)    
 ARM copy prefetched (incr pld)                       :    839.0 MB/s (4.6%)    
 ARM copy prefetched (wrap pld)                       :    845.8 MB/s (5.3%)    
 ARM 2-pass copy prefetched (incr pld)                :    535.4 MB/s (4.9%)    
 ARM 2-pass copy prefetched (wrap pld)                :    517.8 MB/s (4.4%)    
                                                                                
==========================================================================      
== Framebuffer read tests.                                              ==      
==                                                                      ==      
== Many ARM devices use a part of the system memory as the framebuffer, ==      
== typically mapped as uncached but with write-combining enabled.       ==      
== Writes to such framebuffers are quite fast, but reads are much       ==      
== slower and very sensitive to the alignment and the selection of      ==      
== CPU instructions which are used for accessing memory.                ==      
==                                                                      ==      
== Many x86 systems allocate the framebuffer in the GPU memory,         ==      
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==      
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==      
==                                                                      ==      
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==      
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==      
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==      
== performance improvement. For example, the xf86-video-fbturbo DDX     ==      
== uses this trick.                                                     ==      
==========================================================================      
                                                                                
 NEON read (from framebuffer)                         :     45.9 MB/s (1.1%)    
 NEON copy (from framebuffer)                         :     45.4 MB/s (0.9%)    
 NEON 2-pass copy (from framebuffer)                  :     43.7 MB/s (1.7%)    
 NEON unrolled copy (from framebuffer)                :     43.7 MB/s           
 NEON 2-pass unrolled copy (from framebuffer)         :     43.3 MB/s (1.5%)    
 VFP copy (from framebuffer)                          :    258.8 MB/s (3.2%)    
 VFP 2-pass copy (from framebuffer)                   :    240.9 MB/s (2.5%)    
 ARM copy (from framebuffer)                          :    163.4 MB/s (2.0%)    
 ARM 2-pass copy (from framebuffer)                   :    147.9 MB/s (2.5%)    
                                                                                
==========================================================================      
== Memory latency test                                                  ==      
==                                                                      ==      
== Average time is measured for random memory accesses in the buffers   ==      
== of different sizes. The larger is the buffer, the more significant   ==      
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==      
== accesses. For extremely large buffer sizes we are expecting to see   ==      
== page table walk with several requests to SDRAM for almost every      ==      
== memory access (though 64MiB is not nearly large enough to experience ==      
== this effect to its fullest).                                         ==      
==                                                                      ==      
== Note 1: All the numbers are representing extra time, which needs to  ==      
==         be added to L1 cache latency. The cycle timings for L1 cache ==      
==         latency can be usually found in the processor documentation. ==      
== Note 2: Dual random read means that we are simultaneously performing ==      
==         two independent memory accesses at a time. In the case if    ==      
==         the memory subsystem can't handle multiple outstanding       ==      
==         requests, dual random read has the same timings as two       ==      
==         single reads performed one after another.                    ==      
==========================================================================      
                                                                                
block size : single random read / dual random read                              
      1024 :    0.0 ns          /     0.0 ns                                    
      2048 :    0.0 ns          /     0.0 ns                                    
      4096 :    0.0 ns          /     0.0 ns                                    
      8192 :    0.0 ns          /     0.0 ns                                    
     16384 :    0.0 ns          /     0.0 ns                                    
     32768 :    0.0 ns          /     0.0 ns                                    
     65536 :    3.9 ns          /     6.8 ns                                    
    131072 :    6.0 ns          /     9.5 ns                                    
    262144 :    7.2 ns          /    10.5 ns                                    
    524288 :   11.3 ns          /    16.0 ns                                    
   1048576 :   95.9 ns          /   148.6 ns                                    
   2097152 :  142.5 ns          /   193.4 ns                                    
   4194304 :  167.3 ns          /   205.3 ns                                    
   8388608 :  180.8 ns          /   215.9 ns                                    
  16777216 :  190.9 ns          /   224.3 ns                                    
  33554432 :  203.1 ns          /   236.8 ns                                    
  67108864 :  220.1 ns          /   265.3 ns                                    
root@bpi-iot-ros-ai:/# 
